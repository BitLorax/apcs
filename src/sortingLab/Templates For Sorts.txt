Bubble Sort

procedure bubbleSort( A : list of sortable items )
    n = length(A)
    repeat n - 1 times
        for i = 1 to n-1 inclusive do
            /* if this pair is out of order */
            if A[i-1] > A[i] then
                /* swap them */
                swap( A[i-1], A[i] )


Selection Sort

/* a[0] to a[n-1] is the array to sort */
int i,j;
int n; // initialise to a's length

/* advance the position through the entire array */
/*   (could do j < n-1 because single element is also min element) */
for (j = 0; j < n-1; j++)
{
    /* find the min element in the unsorted a[j .. n-1] */

    /* assume the min is the first element */
    int iMin = j;
    /* test against elements after j to find the smallest */
    for (i = j+1; i < n; i++)
    {
        /* if this element is less, then it is the new minimum */
        if (a[i] < a[iMin])
        {
            /* found new minimum; remember its index */
            iMin = i;
        }
    }

    swap(a[j], a[iMin]);
}


Insertion Sort

i ? 1
while i < length(A)
    x ? A[i]
    j ? i - 1
    while j >= 0 and A[j] > x
        A[j+1] ? A[j]
        j ? j - 1
    end while
    A[j+1] ? x[4]
    i ? i + 1
end while



Recursive MergeSort

UP TO YOU....